"use strict";

const defaults = {
  payloadFormatVersion: 1
};

const httpEventNormalizerMiddleware = (opts = {}) => {
  const options = { ...defaults,
    ...opts
  };

  const httpEventNormalizerMiddlewareBefore = async request => {
    const {
      event
    } = request;

    if (isHttpEvent(options.payloadFormatVersion, event)) {
      var _event$queryStringPar, _event$pathParameters;

      event.queryStringParameters = (_event$queryStringPar = event.queryStringParameters) !== null && _event$queryStringPar !== void 0 ? _event$queryStringPar : {};
      event.pathParameters = (_event$pathParameters = event.pathParameters) !== null && _event$pathParameters !== void 0 ? _event$pathParameters : {};

      if (options.payloadFormatVersion === 1) {
        var _event$multiValueQuer;

        event.multiValueQueryStringParameters = (_event$multiValueQuer = event.multiValueQueryStringParameters) !== null && _event$multiValueQuer !== void 0 ? _event$multiValueQuer : {};
      }
    }
  };

  return {
    before: httpEventNormalizerMiddlewareBefore
  };
};

const isHttpEvent = (payloadFormatVersion, event) => {
  if (payloadFormatVersion === 1) {
    return Object.prototype.hasOwnProperty.call(event, 'httpMethod');
  } else if (payloadFormatVersion === 2) {
    return Object.prototype.hasOwnProperty.call(event, 'requestContext') && Object.prototype.hasOwnProperty.call(event.requestContext, 'http') && Object.prototype.hasOwnProperty.call(event.requestContext.http, 'method');
  }

  throw new Error('Unknown API Gateway Payload format. Please use value 1 or 2.');
};

module.exports = httpEventNormalizerMiddleware;
